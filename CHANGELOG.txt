ESLX has been renamed to OpenESL.

Following ESLX registry ID string have been changed:
old string: "eslx/logging/DefaultLayout"             -> new string: "esl/monitoring/SimpleLayout"
old string: "eslx/com/http/server/Socket"            -> new string: "esl/com/http/server/MHDSocket"
old string: "eslx/com/http/client/ConnectionFactory" -> new string: "esl/com/http/client/CURLConnectionFactory"
old string: "eslx/system/StacktraceFactory"          -> new string: "esl/system/DefaultStacktraceFactory"
old string: "eslx/logging/..."                       -> new string: "esl/monitoring/..."
old string: "eslx/..."                               -> new string: "esl/..."

Now there exists a real class in the "esl::" namespace that can be used directly instead of creating an instance via the registry by knowing their ID string.
Every hard coded lookup via ID string should be better replaced by using the corresponding C++ class directly to get errors at compile time instead of runtime.
E.g. instead of creating an instance by ID string "eslx/com/http/server/MHDSocket", you can use the class eslx::com::http::server::MHDSocket.

A new class "esl::logging::Streams" has been introduced.
Class "esl::logging::StreamReal" has been moved as inner class to "esl::monitoring::Streams::Real"
Class "esl::logging::StreamEmpty" has been moved as inner class to "esl::monitoring::Streams::Empty"
Class "esl::logging::Location" has been moved as inner class to "esl::monitoring::Streams::Location"
Class "esl::logging::Level" has been moved as inner class to "esl::monitoring::Streams::Level"

There exists exactly one instance of class "esl::plugin::Registry". This instance is available by calling "esl::plugin::Registry::get()". This class is used already to store plugins to realize different implementations for the same interface with different ID strings (see above, changed ID strings).
Now the registry can be used to store other instances of classed derived from esl::object::Object to make them global available. This was done already in a special way for instances of esl::monitoring::Logging and esl::system::StacktraceFactory.
Now it is used in a common way for all kind of instances (derived from esl::object::Object), and esl::monitoring::Logging and esl::system::StacktraceFactory are no exceptions anymore.
Storing an instance for "esl::object::ProcessingContext" might be reasonambe in many usecases.
On the other hand all "init-" convenience methods of class "esl::monitoring::Logging" have been removed.

Namespace "esl::processing" have been removed.
- Class "esl::processing::Context" has been moved to "esl::object::ProcessingContext"
- Class "esl::processing::Procedure" has been moved to "esl::object::Procedure"
- Class "esl::processing::Task" has been moved to "esl::system::Task"
- Class "esl::processing::TaskFactory" has been moved to "esl::system::TaskFactory"
- Class "esl::processing::TaskDescriptor" has been moved to "esl::system::Task::Descriptor"
- Class "esl::processing::Status" has been moved to "esl::system::Task::Status"

